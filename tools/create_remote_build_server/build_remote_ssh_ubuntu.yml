- hosts: all
  become: true

  vars:
    packages:
      - ansible
      - curl
      - git
      - jq
      - libguestfs-tools
      - libvirt-daemon-system
      - libvirt-dev
      - python3-winrm
      - sshpass
      - tigervnc-viewer
      - unzip
      - virtualbox
      - wget

    grafana_admin_password: grafana_admin_password
    builder_username: builder
    public_ssh_key: "{{ lookup('file', lookup('env','HOME') + '/.ssh/id_ed25519.pub') }}"

    vagrant_plugins:
      - vagrant-libvirt

    action_runner_count: 2

  roles:
    - role: my_common_defaults
    - role: cloudalchemy.node-exporter
      node_exporter_enabled_collectors:
        - diskstats:
            ignored-devices: "^(ram|loop|fd)\\d+$"
        - filesystem:
            ignored-mount-points: "^/(dev|proc|run|sys)($|/)"
            ignored-fs-types: "^(sys|proc|auto)fs$"
        - interrupts
        - meminfo_numa
        - mountstats
        - netstat:
            fields: "(.*)"
        - systemd
        - tcpstat
        - vmstat:
            fields: "(.*)"

    - role: cloudalchemy.prometheus
      prometheus_storage_retention: "40d"
      prometheus_targets:
        node:
          - targets:
              - localhost:9100
        grafana:
          - targets:
              - "localhost:3000"
      prometheus_scrape_configs:
        - job_name: "prometheus"
          metrics_path: "/metrics"
          static_configs:
            - targets:
                - "localhost:9090"
        - job_name: "node"
          file_sd_configs:
            - files:
                - "/etc/prometheus/file_sd/node.yml"
        - job_name: "grafana"
          file_sd_configs:
            - files:
                - "/etc/prometheus/file_sd/grafana.yml"

    - role: cloudalchemy.grafana
      grafana_security:
        admin_user: admin
        admin_password: "{{ grafana_admin_password }}"
      grafana_auth:
        anonymous:
          org_name: "Main Org."
          org_role: Viewer
      grafana_datasources:
        - name: "Prometheus"
          type: "prometheus"
          access: "proxy"
          url: "http://127.0.0.1:9090"
          isDefault: true
      grafana_dashboards:
        - dashboard_id: "1860"
          revision_id: "12"
          datasource: "{{ grafana_datasources.0.name }}"
        - dashboard_id: "3662"
          revision_id: "2"
          datasource: "{{ grafana_datasources.0.name }}"
        - dashboard_id: "9852"
          revision_id: "1"
          datasource: "{{ grafana_datasources.0.name }}"

  tasks:
    - name: Set my_ansible_user fact
      set_fact:
        my_ansible_user: "{{ ansible_user }}"

    - name: Add {{ my_ansible_user }} to sudoers to become root easily
      lineinfile:
        dest: /etc/sudoers.d/01_{{ my_ansible_user }}
        create: yes
        regexp: "^{{ my_ansible_user }} ALL="
        line: "{{ my_ansible_user }} ALL=(ALL) NOPASSWD:ALL"
        validate: "visudo -cf %s"

    - name: Disable suspend when lid is closed
      ini_file:
        path: /etc/systemd/logind.conf
        section: Login
        option: HandleLidSwitch
        value: ignore
      notify: restart systemd-logind

    - name: Update all packages to the latest version
      apt:
        upgrade: dist
        update_cache: yes
      register: result
      until: result is succeeded

    # It's necessary to use upstream Vagrant because it contains Ruby WinRM
    - name: Get latest+upstream version of Vagrant
      uri:
        url: https://checkpoint-api.hashicorp.com/v1/check/vagrant
        return_content: yes
      register: vagrant_uri

    - name: Install upstream Vagrant
      apt:
        deb: "https://releases.hashicorp.com/vagrant/{{ vagrant_uri.json.current_version }}/vagrant_{{ vagrant_uri.json.current_version }}_{{ ansible_architecture }}.deb"
      register: result
      until: result is succeeded

    - name: Install packages
      apt:
        pkg: "{{ packages }}"
      register: result
      until: result is succeeded

    - name: Add the users to kvm, vboxusers and libvirt group
      user:
        name: "{{ item }}"
        shell: /bin/bash
        groups: kvm,libvirt,vboxusers
        append: yes
      loop:
        - "{{ builder_username }}"
        - "{{ my_ansible_user }}"

    - name: Set authorized key taken from file for all users
      authorized_key:
        user: "{{ item }}"
        key: "{{ public_ssh_key }}"
      loop:
        - root
        - "{{ builder_username }}"
        - "{{ my_ansible_user }}"

    - name: Get latest version of Packer
      uri:
        url: https://checkpoint-api.hashicorp.com/v1/check/packer
        return_content: yes
      register: packer_uri

    - name: Download and unzip packer
      unarchive:
        src: "https://releases.hashicorp.com/packer/{{ packer_uri.json.current_version }}/packer_{{ packer_uri.json.current_version }}_linux_amd64.zip"
        dest: /usr/local/bin/
        remote_src: yes
        creates: /usr/local/bin/packer
        validate_certs: false

    - block:
        - name: List installed Vagrant Plugins
          command: vagrant plugin list
          register: vagrant_plugin_list
          changed_when: false

        - name: Install Vagrant Plugins
          command: vagrant plugin install {{ item }}
          loop: "{{ vagrant_plugins }}"
          when: vagrant_plugin_list.stdout is not search(item)

      become_user: "{{ my_ansible_user }}"

    - block:
        - name: List installed Vagrant Plugins
          command: vagrant plugin list
          register: vagrant_plugin_list
          changed_when: false

        - name: Install Vagrant Plugins
          command: vagrant plugin install {{ item }}
          loop: "{{ vagrant_plugins }}"
          when: vagrant_plugin_list.stdout is not search(item)

        - name: Create a directories for action-runners if they do not exist
          file:
            path: /home/{{ builder_username }}/actions-runner-{{ item }}
            state: directory
          loop: "{{ range(1, action_runner_count + 1) | list }}"

        - name: Get latest "actions-runner" release
          uri:
            url: "https://api.github.com/repos/actions/runner/releases/latest"
          register: github_api_action_runner

        - name: Download and unpack the "actions-runner"
          unarchive:
            src: https://github.com/actions/runner/releases/download/v{{ github_api_action_runner.json.tag_name[1:] }}/actions-runner-linux-x64-{{ github_api_action_runner.json.tag_name[1:] }}.tar.gz
            dest: /home/{{ builder_username }}/actions-runner-{{ item }}
            remote_src: yes
          loop: "{{ range(1, action_runner_count + 1) | list }}"

        - name: Register actions-runner-x
          command: ./config.sh --unattended --url {{ MY_PACKER_TEMPLATES_GITHUB_REPOSITORY }} --token {{ GITHUB_SELF_HOSTED_RUNNER_TOKEN }} --name "{{ ansible_hostname }}-{{ item }}" --work "_work"
          args:
            chdir: /home/{{ builder_username }}/actions-runner-{{ item }}
            creates: /home/{{ builder_username }}/actions-runner-{{ item }}/.runner
          loop: "{{ range(1, action_runner_count + 1) | list }}"
          tags: actions-runner_registration

      become_user: "{{ builder_username }}"

    - name: Install actions-runner-x service
      shell: ./svc.sh install && ./svc.sh start
      args:
        chdir: /home/{{ builder_username }}/actions-runner-{{ item }}
        creates: /home/{{ builder_username }}/actions-runner-{{ item }}/.service
      environment:
        SUDO_USER: "{{ builder_username }}"
      loop: "{{ range(1, action_runner_count + 1) | list }}"
      tags: actions-runner_installation

  handlers:
    - name: restart systemd-logind
      systemd:
        name: systemd-logind
        state: restarted
