name: build

on:
  repository_dispatch:
  schedule:
    - cron: '0 0 1 * *'

env:
  PACKER_IMAGES_OUTPUT_DIR: /var/tmp/packer-templates-images
  PACKER_CACHE_DIR: /var/tmp/packer_cache
  LOGDIR: /var/tmp/packer-templates-logs
  VAGRANT_CLOUD_USER: peru
  VAGRANT_CLOUD_TOKEN: ${{ secrets.VAGRANT_CLOUD_TOKEN }}

jobs:

##############
# libvirt
##############

  build-libvirt:
    name: "*"
    runs-on: [self-hosted, linux, x64]
    strategy:
      max-parallel: 4
      fail-fast: false
      matrix:
        stage:
          - windows-server-2012_r2-standard-x64-eval-libvirt
          - windows-server-2016-standard-x64-eval-libvirt
          - windows-server-2019-datacenter-x64-eval-libvirt
          - my_centos-7-x86_64-libvirt
          - my_ubuntu-20.04-server-amd64-libvirt
          - my_windows-10-enterprise-x64-eval-libvirt
          - windows-10-enterprise-x64-eval-libvirt
          - ubuntu-20.04-server-amd64-libvirt
          - ubuntu-18.04-server-amd64-libvirt
          - ubuntu-16.04-server-amd64-libvirt
          - ubuntu-20.04-desktop-amd64-libvirt
          - ubuntu-18.04-desktop-amd64-libvirt

    steps:
      - name: Check if image is not already built
        run: |
          BUILD="${{ matrix.stage }}"
          PACKER_VAGRANT_PROVIDER="${BUILD##*-}"
          NAME="${BUILD%-*}"
          BOX_VERSION="$(date +%Y%m%d).01"
          echo "*** $(hostname --short)"
          if curl -L --fail --silent --head --output /dev/null "https://vagrantcloud.com/${VAGRANT_CLOUD_USER}/boxes/${NAME}/versions/${BOX_VERSION}/providers/${PACKER_VAGRANT_PROVIDER}.box"; then
            echo "*** ${BUILD} exists on Vagrant Cloud"
            echo "::set-env name=skip::true"
          fi

      - uses: actions/checkout@v2.3.0
        if: env.skip != 'true'
        with:
          submodules: true

      - name: Build image - ${{ matrix.stage }}
        if: env.skip != 'true'
        run: |
          test -d "${PACKER_CACHE_DIR}" || mkdir -v "${PACKER_CACHE_DIR}"
          ln -sv "${PACKER_CACHE_DIR}" packer_cache
          ./build.sh ${{ matrix.stage }}

      - name: Check the created box image - ${{ matrix.stage }}
        if: env.skip != 'true'
        run: ./vagrant_init_destroy_boxes.sh ${PACKER_IMAGES_OUTPUT_DIR}/${{ matrix.stage }}.box

      - name: Upload box to Vagrant Cloud - ${{ matrix.stage }}
        if: env.skip != 'true' && ( github.event_name == 'schedule' || ( github.event_name == 'repository_dispatch' && github.event.action == 'build_release_upload' ) )
        run: ./upload_box_to_vagrantcloud.sh ${VAGRANT_CLOUD_USER}@${PACKER_IMAGES_OUTPUT_DIR}/${{ matrix.stage }}.box

      - name: Build log cleanup - ${{ matrix.stage }}
        if: env.skip != 'true' && ( github.event_name == 'schedule' || ( github.event_name == 'repository_dispatch' && github.event.action == 'build_release_upload' ) )
        run: |
          rm -v "${LOGDIR}/${{ matrix.stage }}-packer.log"
          rm -v "${LOGDIR}/${{ matrix.stage }}-init.log"
          if [[ ! "$( ls -A "${LOGDIR}" )" ]]; then rmdir -v "${LOGDIR}"; fi
          rm -v "${PACKER_IMAGES_OUTPUT_DIR}/${{ matrix.stage }}.box"
          if [[ ! "$( ls -A "${PACKER_IMAGES_OUTPUT_DIR}" )" ]]; then rmdir -v "${PACKER_IMAGES_OUTPUT_DIR}"; fi

##############
# VirtualBox
##############

  build-virtualbox:
    name: "*"
    runs-on: [self-hosted, linux, x64]
    needs: build-libvirt
    strategy:
      max-parallel: 4
      fail-fast: false
      matrix:
        stage:
          - windows-server-2012_r2-standard-x64-eval-virtualbox
          - windows-server-2016-standard-x64-eval-virtualbox
          - windows-server-2019-datacenter-x64-eval-virtualbox
          - my_centos-7-x86_64-virtualbox
          - my_ubuntu-20.04-server-amd64-virtualbox
          - my_windows-10-enterprise-x64-eval-virtualbox
          - windows-10-enterprise-x64-eval-virtualbox
          - ubuntu-20.04-server-amd64-virtualbox
          - ubuntu-18.04-server-amd64-virtualbox
          - ubuntu-16.04-server-amd64-virtualbox
          - ubuntu-20.04-desktop-amd64-virtualbox
          - ubuntu-18.04-desktop-amd64-virtualbox

    steps:
      - name: Check if image is not already built
        run: |
          BUILD="${{ matrix.stage }}"
          PACKER_VAGRANT_PROVIDER="${BUILD##*-}"
          NAME="${BUILD%-*}"
          BOX_VERSION="$(date +%Y%m%d).01"
          echo "*** $(hostname --short)"
          if curl -L --fail --silent --head --output /dev/null "https://vagrantcloud.com/${VAGRANT_CLOUD_USER}/boxes/${NAME}/versions/${BOX_VERSION}/providers/${PACKER_VAGRANT_PROVIDER}.box"; then
            echo "*** ${BUILD} exists on Vagrant Cloud"
            echo "::set-env name=skip::true"
          fi

      - uses: actions/checkout@v2.3.0
        if: env.skip != 'true'
        with:
          submodules: true

      - name: Build image - ${{ matrix.stage }}
        if: env.skip != 'true'
        run: |
          test -d "${PACKER_CACHE_DIR}" || mkdir -v "${PACKER_CACHE_DIR}"
          ln -sv "${PACKER_CACHE_DIR}" packer_cache
          ./build.sh ${{ matrix.stage }}

      - name: Check the created box image - ${{ matrix.stage }}
        if: env.skip != 'true'
        run: ./vagrant_init_destroy_boxes.sh ${PACKER_IMAGES_OUTPUT_DIR}/${{ matrix.stage }}.box

      - name: Upload box to Vagrant Cloud - ${{ matrix.stage }}
        if: env.skip != 'true' && ( github.event_name == 'schedule' || ( github.event_name == 'repository_dispatch' && github.event.action == 'build_release_upload' ) )
        run: ./upload_box_to_vagrantcloud.sh ${VAGRANT_CLOUD_USER}@${PACKER_IMAGES_OUTPUT_DIR}/${{ matrix.stage }}.box

      - name: Build log cleanup - ${{ matrix.stage }}
        if: env.skip != 'true' && ( github.event_name == 'schedule' || ( github.event_name == 'repository_dispatch' && github.event.action == 'build_release_upload' ) )
        run: |
          rm -v "${LOGDIR}/${{ matrix.stage }}-packer.log"
          rm -v "${LOGDIR}/${{ matrix.stage }}-init.log"
          if [[ ! "$( ls -A "${LOGDIR}" )" ]]; then rmdir -v "${LOGDIR}"; fi
          rm -v "${PACKER_IMAGES_OUTPUT_DIR}/${{ matrix.stage }}.box"
          if [[ ! "$( ls -A "${PACKER_IMAGES_OUTPUT_DIR}" )" ]]; then rmdir -v "${PACKER_IMAGES_OUTPUT_DIR}"; fi

  clean_check_versions:
    needs: build-virtualbox
    runs-on: ubuntu-latest
    steps:
      - name: Remove old versions
        run: |
          for NAME in ubuntu-{18,20}.04-desktop-amd64 ubuntu-{20,18,16}.04-server-amd64 my_ubuntu-20.04-server-amd64 my_centos-7-x86_64 my_windows-10-enterprise-x64-eval windows-{server-{{2016,2012_r2}-standard,2019-datacenter},10-enterprise}-x64-eval; do
            OLD_VERSIONS=$(curl -s "https://app.vagrantup.com/api/v1/box/${VAGRANT_CLOUD_USER}/${NAME}" | jq -r '.current_version.version as $current_version | .versions[] | select (.version != $current_version) .version')
            for VERSION in ${OLD_VERSIONS}; do
              echo "*** Removing box version: https://vagrantcloud.com/api/v1/box/${VAGRANT_CLOUD_USER}/${NAME}/version/${VERSION}"
              curl -s "https://app.vagrantup.com/api/v1/box/${VAGRANT_CLOUD_USER}/${NAME}/version/${VERSION}" -X DELETE -d "access_token=${VAGRANT_CLOUD_TOKEN}" -o /dev/null
            done
          done

      - name: Verify if the boxes are avaiable on the Vagrant Cloud
        run: |
          for NAME in ubuntu-{20.04,18.04}-desktop-amd64 ubuntu-{20.04,18.04,16.04}-server-amd64 my_ubuntu-20.04-server-amd64 my_centos-7-x86_64 my_windows-10-enterprise-x64-eval windows-{server-{{2016,2012_r2}-standard,2019-datacenter},10-enterprise}-x64-eval; do
            for VAGRANT_PROVIDER in libvirt virtualbox; do
              CURRENT_VERSION=$(curl -s https://app.vagrantup.com/api/v1/box/peru/${NAME} | jq -r ".current_version.version")
              CHECKSUM=$(curl -s https://app.vagrantup.com/api/v1/box/peru/${NAME} | jq -r ".current_version.providers[] | select (.name == \"${VAGRANT_PROVIDER}\") .checksum")
              URL="https://app.vagrantup.com/peru/boxes/${NAME}/versions/${CURRENT_VERSION}/providers/${VAGRANT_PROVIDER}.box"
              echo "*** ${URL} | ${CHECKSUM}"
              if ! curl -L --fail --silent --head --output /dev/null "${URL}"; then
                echo "* URL \"${URL}\" is not accessible !"
                exit 1
              fi
              if [ "$(curl -s "https://app.vagrantup.com/peru/boxes/${NAME}" | jq '.versions | length')" != "1" ]; then
                echo "* Too many versions for: https://app.vagrantup.com/peru/boxes/${NAME} !"
                exit 2
              fi
            done
          done
