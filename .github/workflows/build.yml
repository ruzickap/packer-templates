name: build

on:
  repository_dispatch:
  schedule:
    - cron: '0 0 1 * *'

env:
  PACKER_IMAGES_OUTPUT_DIR: /var/tmp/packer-templates-images
  PACKER_CACHE_DIR: /var/tmp/packer_cache
  LOGDIR: /var/tmp/packer-templates-logs
  VAGRANT_CLOUD_USER: peru
  VAGRANT_CLOUD_TOKEN: ${{ secrets.VAGRANT_CLOUD_TOKEN }}
  # Needed for Packer when calling ansible (https://github.com/ansible/ansible/issues/32499)
  OBJC_DISABLE_INITIALIZE_FORK_SAFETY: YES

jobs:
  build-boxes:
    name: "*"
    runs-on: macos-10.15
    strategy:
      fail-fast: false
      matrix:
        stage:
          - my_ubuntu-20.04-server-amd64-libvirt
          - my_windows-10-enterprise-x64-eval-libvirt
          - ubuntu-16.04-server-amd64-libvirt
          - ubuntu-18.04-desktop-amd64-libvirt
          - ubuntu-18.04-server-amd64-libvirt
          - ubuntu-20.04-desktop-amd64-libvirt
          - ubuntu-20.04-server-amd64-libvirt
          - windows-10-enterprise-x64-eval-libvirt
          - windows-server-2012_r2-standard-x64-eval-libvirt
          - windows-server-2016-standard-x64-eval-libvirt
          - windows-server-2019-standard-x64-eval-libvirt
          - my_ubuntu-20.04-server-amd64-virtualbox
          - my_windows-10-enterprise-x64-eval-virtualbox
          - ubuntu-16.04-server-amd64-virtualbox
          - ubuntu-18.04-desktop-amd64-virtualbox
          - ubuntu-18.04-server-amd64-virtualbox
          - ubuntu-20.04-desktop-amd64-virtualbox
          - ubuntu-20.04-server-amd64-virtualbox
          - windows-10-enterprise-x64-eval-virtualbox
          - windows-server-2012_r2-standard-x64-eval-virtualbox
          - windows-server-2016-standard-x64-eval-virtualbox
          - windows-server-2019-standard-x64-eval-virtualbox

    steps:
      - name: Skip image build if it already exists in Vagrant Cloud
        run: |
          set -x
          BUILD="${{ matrix.stage }}"
          PACKER_VAGRANT_PROVIDER="${BUILD##*-}"
          NAME="${BUILD%-*}"

          # Check if the boxes (virtualbox/libvirt) with the same git hash already exists
          CURRENT_VERSION_DESCRIPTION_MARKDOWN="$(curl -L --silent "https://app.vagrantup.com/api/v1/box/${VAGRANT_CLOUD_USER}/${NAME}" | jq '.current_version.version as $current_version | .versions[] | select (.version == $current_version) .description_markdown')"
          if [[ "${CURRENT_VERSION_DESCRIPTION_MARKDOWN}" =~ ${GITHUB_SHA} ]] ; then
            echo "*** Git hash \"${GITHUB_SHA}\" found in current markdown description"
            # Skip build if the box already exists
            CURRENT_VERSION_PROVIDER_URL="$(curl -L --silent "https://app.vagrantup.com/api/v1/box/${VAGRANT_CLOUD_USER}/${NAME}" | jq -r ".current_version.version as \$current_version | .versions[] | select (.version == \$current_version) .providers[] | select (.name == \"${PACKER_VAGRANT_PROVIDER}\") .download_url")"
            if [ -n "${CURRENT_VERSION_PROVIDER_URL}" ]; then
              echo "*** Found already build image \"${BUILD}\" with hash \"${GITHUB_SHA}\": ${CURRENT_VERSION_PROVIDER_URL}"
              echo "*** This build will be skipped..."
              echo "skip=true" >> $GITHUB_ENV
            else
              # Set BOX_VERSION variable from existing provider (if exists) or from "date"
              BOX_VERSION="$(curl -L --silent "https://app.vagrantup.com/api/v1/box/${VAGRANT_CLOUD_USER}/${NAME}" | jq -r ".current_version.version")"
              echo "*** Using previously defined box version \"${BOX_VERSION}\", because there is already builded box with git hash \"${GITHUB_SHA}\""
            fi
          else
            BOX_VERSION="$(date +%Y%m%d).01"
            echo "*** Using new box version based on current date: ${BOX_VERSION}"
          fi
          echo "BOX_VERSION=${BOX_VERSION}" >> $GITHUB_ENV

      - uses: actions/checkout@v2
        if: env.skip != 'true'
        with:
          submodules: true

      - name: Install packages
        if: env.skip != 'true'
        run: |
          set -x
          [[ -f /usr/local/bin/2to3 ]] && rm /usr/local/bin/2to3
          brew update > /dev/null
          brew uninstall ant aws-sam-cli aspell azure-cli cmake gcc gcc@8 gcc@9 gradle helm icu4c maven mongodb-community mongodb-database-tools node@14 openjdk php postgresql python@3.8 selenium-server-standalone
          brew install bash coreutils gnu-sed
          brew upgrade packer vagrant
          if [[ "${{ matrix.stage }}" =~ "libvirt" ]]; then
            brew install qemu xorriso
          fi
          if [[ "${{ matrix.stage }}" =~ "virtualbox" ]]; then
            brew upgrade virtualbox
            brew install --cask virtualbox-extension-pack
          fi
          pip3 install ansible==2.10.6 pywinrm==0.4.1
          # Update ansible.windows to the latest version to fix the problems in https://github.com/ansible-collections/ansible.windows/issues/142
          # This should be removed in Ansible version v2.11
          ansible-galaxy collection install ansible.windows:=1.4.0 git+https://github.com/chocolatey/chocolatey-ansible.git,master
          echo "/usr/local/bin:/usr/local/opt/gnu-sed/libexec/gnubin:/usr/local/opt/coreutils/libexec/gnubin" >> "${GITHUB_PATH}"

      - name: Set environment variables from payload
        if: env.skip != 'true' && ( github.event_name == 'repository_dispatch' && github.event.client_payload )
        run: |
          echo '${{ toJson(github.event.client_payload) }}' | jq -r "to_entries|map(\"\(.key)=\(.value|tostring)\")|.[]" >> ${GITHUB_ENV}

      - name: Build image
        if: env.skip != 'true'
        run: |
          ./build.sh ${{ matrix.stage }}

      - name: Check the created box image
        if: env.skip != 'true' && contains( matrix.stage, 'virtualbox' )
        run: |
          ./vagrant_init_destroy_boxes.sh "${PACKER_IMAGES_OUTPUT_DIR}/${{ matrix.stage }}.box"

      - name: Upload box to Vagrant Cloud
        if: env.skip != 'true' && ( github.event_name == 'schedule' || ( github.event_name == 'repository_dispatch' && github.event.action == 'build_release_upload' ) )
        env:
          BOX_VERSION: ${{ env.BOX_VERSION }}
        run: |
          ./upload_box_to_vagrantcloud.sh "${VAGRANT_CLOUD_USER}@${PACKER_IMAGES_OUTPUT_DIR}/${{ matrix.stage }}.box"

  clean_check_versions:
    needs: build-boxes
    if: always()
    runs-on: ubuntu-20.04
    steps:
      - name: Remove old versions
        run: |
          for NAME in ubuntu-{20,18}.04-desktop-amd64 ubuntu-{20,18,16}.04-server-amd64 my_ubuntu-20.04-server-amd64 {my_,}windows-10-enterprise-x64-eval windows-server-{2019,2016,2012_r2}-standard-x64-eval; do
            # Verify if current version of the box has both boxes (virtualbox + libvirt)
            # CURRENT_VERSION_PROVIDERS=$(curl -s "https://app.vagrantup.com/api/v1/box/${VAGRANT_CLOUD_USER}/${NAME}"| jq -r ".current_version.providers|length")
            # if [[ ${CURRENT_VERSION_PROVIDERS} -ne 2 ]]; then
            #   echo "*** Current version of ${VAGRANT_CLOUD_USER}/${NAME} does not contain both box versions (virtualbox + libvirt) - Skipping!"
            #   continue
            # fi
            OLD_VERSIONS=$(curl -s "https://app.vagrantup.com/api/v1/box/${VAGRANT_CLOUD_USER}/${NAME}" | jq -r '.current_version.version as $current_version | [ .versions[] | select (.version != $current_version) .version ] | join(" ")')
            for VERSION in ${OLD_VERSIONS}; do
              echo "*** Removing box version: https://vagrantcloud.com/api/v1/box/${VAGRANT_CLOUD_USER}/${NAME}/version/${VERSION}"
              curl -s "https://app.vagrantup.com/api/v1/box/${VAGRANT_CLOUD_USER}/${NAME}/version/${VERSION}" -X DELETE -d "access_token=${VAGRANT_CLOUD_TOKEN}" -o /dev/null
            done
          done

      - name: Verify if the boxes are avaiable on the Vagrant Cloud
        run: |
          set -eux
          for NAME in ubuntu-{20,18}.04-desktop-amd64 ubuntu-{20,18,16}.04-server-amd64 my_ubuntu-20.04-server-amd64 {my_,}windows-10-enterprise-x64-eval windows-server-{2019,2016,2012_r2}-standard-x64-eval; do
            for VAGRANT_PROVIDER in libvirt virtualbox; do
              CURRENT_VERSION=$(curl -s https://app.vagrantup.com/api/v1/box/peru/${NAME} | jq -r ".current_version.version")
              CHECKSUM=$(curl -s https://app.vagrantup.com/api/v1/box/peru/${NAME} | jq -r ".current_version.providers[] | select (.name == \"${VAGRANT_PROVIDER}\") .checksum")
              URL="https://app.vagrantup.com/peru/boxes/${NAME}/versions/${CURRENT_VERSION}/providers/${VAGRANT_PROVIDER}.box"
              echo "*** ${URL} | ${CHECKSUM}"
              if ! curl -L --fail --silent --head --output /dev/null "${URL}"; then
                echo "* URL \"${URL}\" is not accessible !"
                exit 1
              fi
              if [ "$(curl -s "https://app.vagrantup.com/peru/boxes/${NAME}" | jq '.versions | length')" != "1" ]; then
                echo "* Too many versions for: https://app.vagrantup.com/peru/boxes/${NAME} !"
                exit 2
              fi
            done
          done
